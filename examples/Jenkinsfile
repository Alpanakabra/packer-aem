node {
    currentBuild.displayName = "#${env.BUILD_NUMBER}: ${Component}-${ImageConfiguration} "
}

stage ('Checkout') {
    
    node {
        echo "Initialization of ${ImageConfiguration} ${Component} Started"
        
        //TODO: specify a release version instead of master including the downloaded puppet modules. (then should not need the make deps)
        dir('packer-aem-bootstrap'){
            git url: 'https://github.com/shinesolutions/packer-aem-bootstrap.git', branch: 'master'
        }

        echo 'Initialization Complete'
    }
    
}

stage ('Configuration') {
    
    node {
        echo "Configuration of ${ImageConfiguration} ${Component} Started"

        echo "PATH=${env.PATH}"
        env.PATH = "/usr/local/bin:${env.PATH}"
        echo "PATH=${env.PATH}"

        echo 'Configuration Complete'
    }
    
}

//TODO: Should not need this stage. dependencies should be included in the packer-aem-bootstrap release zip.

stage ('Dependencies') {
    
    node {
        echo "Dependencies of ${ImageConfiguration} ${Component} Started"

        sh 'cd packer-aem-bootstrap/ && make clean deps'
        sh 'cd ../'

        echo 'Dependencies Complete'
    }
}

stage ('Build') {
    
    node {
        echo "Build of ${ImageConfiguration} ${Component} Started"

        if ("${Component}" == "publish" || "${Component}" == "author") {

            retry(5){
                sh "cd packer-aem-bootstrap/ && make ${Component} version=${env.BUILD_NUMBER} var_file=../packer-aem-bootstrap/conf/${ImageConfiguration}.json ami_users=${AmiUsers}"
            }

        } else {

            sh "cd packer-aem-bootstrap/ && make ${Component} version=${env.BUILD_NUMBER} var_file=../packer-aem-bootstrap/conf/${ImageConfiguration}.json ami_users=${AmiUsers}"

        }

        echo 'Build Complete'
    }
    
}

stage ('Commit') {
    
    node {
        echo "Commit of ${ImageConfiguration} ${Component} Started"

        if ("${Component}" == "base" || "${Component}" == "java" || "${Component}" == "httpd" ) {

            dir('packer-aem-bootstrap'){

                def sourceList

                switch ("${Component}") {

                    case 'base':

                        sourceList = "java and httpd"

                        break

                    case 'java':

                        sourceList = "author and publish"

                        break

                    case 'httpd':

                        sourceList = "dispatcher"

                        break

                    default:

                        sourceList = "unknown"

                        break

                }

                //TODO: need to handle concurrent pushes to the repo. git push or pull rebase or push etc....

                sh 'git add .'
                sh "git commit -m \"Update ${sourceList} Source AMI ID - ${env.BUILD_URL}\""
                sh 'git pull --rebase origin master'
                sh 'git push origin master'

            }

        }
        
        echo 'Commit Complete'
    }

}



stage ('Trigger DownStream') {
    
    node {

        if ("${TriggerDownStream}") {

            echo "Trigger DownStream of ${ImageConfiguration} ${Component} Started"

            switch ("${Component}") {

                case 'base':

                    def branches = [:]

                    echo "Triggering build-java-ami Job with ImageConfiguration ${ImageConfiguration}"
                    branches['build-java-ami'] = {
                        build job: 'build-java-ami', parameters: [[$class: 'StringParameterValue', name: 'ImageConfiguration', value: "${ImageConfiguration}"]], wait: false
                    }

                    echo "Triggering build-httpd-ami Job with ImageConfiguration ${ImageConfiguration}"
                    branches['build-httpd-ami'] = {
                        build job: 'build-httpd-ami', parameters: [[$class: 'StringParameterValue', name: 'ImageConfiguration', value: "${ImageConfiguration}"]], wait: false
                    }

                    parallel branches

                    break

                case 'java':

                    def branches = [:]

                    echo "Triggering build-aem-author-ami Job with ImageConfiguration ${ImageConfiguration}"
                    branches['build-aem-author-ami'] = {
                        build job: 'build-aem-author-ami', parameters: [[$class: 'StringParameterValue', name: 'ImageConfiguration', value: "${ImageConfiguration}"]], wait: false
                    }

                    echo "Triggering build-aem-publish-ami Job with ImageConfiguration ${ImageConfiguration}"
                    branches['build-aem-publish-ami'] = {
                        build job: 'build-aem-publish-ami', parameters: [[$class: 'StringParameterValue', name: 'ImageConfiguration', value: "${ImageConfiguration}"]], wait: false
                    }

                    parallel branches

                    break

                case 'httpd':

                    echo "Triggering build-aem-dispatcher-ami Job with ImageConfiguration ${ImageConfiguration}"
                    build job: 'build-aem-dispatcher-ami', parameters: [[$class: 'StringParameterValue', name: 'ImageConfiguration', value: "${ImageConfiguration}"]], wait: false

                    break

                default:
                    break

            }

             echo 'Trigger DownStream Complete'


        } else {

            echo 'Skipping Trigger DownStream'

        }


    }
    
    
}
